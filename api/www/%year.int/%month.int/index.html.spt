import re
from ConfigParser import ConfigParser
from datetime import datetime

from aspen.logging import log
import requests

config = ConfigParser()
config.read('../../config.ini')
server = config.get('couch', 'server')
db = config.get('couch', 'db')
url = "{server}{db}/_design/couchmail".format(server=server, db=db)
has_search = True if '.cloudant.com' in server else False

def getJSON(url):
    if '@' in url:
        log('https://' + url.split('@')[1:2][0].replace(' ', '+'))
    else:
        log(url)
    return requests.get(url).json()

[---]
year = path['year'] if 'year' in path else date.today().year
month = path['month'] if 'month' in path else datetime.today().month

# months for the current year
_months = getJSON(url + '/_view/by_date?descending=true&group_level=2&startkey=[{year},13]&endkey=[{year},0]'.format(year=year))
if 'rows' in _months:
  for row in _months['rows']:
    row['month'] = '%02d' % row['key'][1]

years = getJSON(url + '/_view/by_date?descending=true&group_level=1')
if 'rows' in years:
  for row in years['rows']:
    row['year'] = row['key'][0]
    # add months if it's the current year
    if row['year'] == year:
      row['months'] = _months


if qs and 'q' in qs:
    url += ("/_search/mail?counts=[%22subject%22,%20%22to%22,%20%22from%22]"
            "&q=date:[{year}{month} TO {year}{month}] AND {q}")\
            .format(year=year, month=month, q=qs['q'])
else:
    url += ("/_view/by_date?descending=true&reduce=false&limit=20&include_docs=true"
            "&startkey=[{year},{month_after}]&endkey=[{year},{month_before}]")\
            .format(year=year, month_after=month+1, month_before=month-1)

results = getJSON(url)

# obfuscate email addresses
if 'rows' in results:
    for row in results['rows']:
        if 'doc' in row:
          row['fields'] = {}
          row['fields']['subject'] = row['doc']['subject']
          row['fields']['from'] = row['doc']['from']
          row['fields']['full_date'] = datetime(*(row['doc']['date'][:6]))\
            .isoformat()
        row['fields']['from'] = re.sub(r'(.*)<(.)(.*)@(.*)>', r'\1<\2...@\4>',
                                       row['fields']['from'])
    if len(results['rows']) > 0:
        message_id = '/' + results['rows'][0]['id'].replace('+', '%2B')

[---] via pystache
{{> layout}}
